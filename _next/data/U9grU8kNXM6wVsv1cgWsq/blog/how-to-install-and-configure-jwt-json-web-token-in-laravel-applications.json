{"pageProps":{"post":{"id":1175,"date":"2021-06-12T23:12:21","date_gmt":"2021-06-12T15:12:21","guid":{"rendered":"https://niyazjamal.wordpress.com/?p=1175"},"modified":"2021-06-15T09:44:00","modified_gmt":"2021-06-15T01:44:00","slug":"how-to-install-and-configure-jwt-json-web-token-in-laravel-applications","status":"publish","type":"post","link":"https://niyazjamal.wordpress.com/2021/06/12/how-to-install-and-configure-jwt-json-web-token-in-laravel-applications/","title":{"rendered":"How to install and configure JWT (Json Web Token) in Laravel&nbsp;Applications"},"content":{"rendered":"\r\n<p><strong>JWT installation &amp; Settings</strong></p>\r\n\r\n\r\n\r\n<p>Before we get into this JSON Web Token tutorial, what exactly is a JWT?<br />In modern web trends, Popularity of single page applications, mobile applications, and RESTful API services, We are no longer spending much time building markup, instead we are building APIs that our front-end applications consume.<br />Back-end is more about business logic and data, while presentation logic is moved exclusively to the front-end or mobile applications. These changes have led to new ways of implementing authentication in modern applications.</p>\r\n\r\n\r\n\r\n<p><strong>What is a JSON Web Token?</strong></p>\r\n\r\n\r\n\r\n<p>A JSON Web Token is used to send information that can be verified and trusted by means of a digital signature. It comprises a compact and URL-safe JSON object, which is cryptographically signed to verify its authenticity, and which can also be encrypted if the payload contains sensitive information.<br />Because of its compact structure, JWT is usually used in HTTP Authorization headers or URL query parameters.</p>\r\n\r\n\r\n\r\n<p><strong>How to use JWT authentication approach in Laravel applications?</strong><!--more--></p>\r\n\r\n\r\n\r\n<p>JWT (Json Web token) to make token based authentication system in Laravel. if we implement everything of jwt authentication system, it’s hard and takes long time. so we decided to use “tymon/jwt-auth” package to integarte quickly to develop jwt authentication system.</p>\r\n\r\n\r\n\r\n<p>tymon/jwt-auth: <a href=\"https://github.com/tymondesigns/jwt-auth\">https://github.com/tymondesigns/jwt-auth</a><br />tymon/jwt-auth document: <a href=\"https://jwt-auth.readthedocs.io/en/develop/\">https://jwt-auth.readthedocs.io/en/develop/</a></p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>composer require tymon/jwt-auth</code></pre>\r\n\r\n\r\n\r\n<p><a href=\"https://jwt-auth.readthedocs.io/en/develop/laravel-installation/\" rel=\"nofollow\">https://jwt-auth.readthedocs.io/en/develop/laravel-installation/</a></p>\r\n\r\n\r\n\r\n<p><strong>Publish the config</strong></p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>php artisan vendor:publish --provider=\"Tymon\\JWTAuth\\Providers\\LaravelServiceProvider\"</code></pre>\r\n\r\n\r\n\r\n<p>You should now have a config/jwt.php file that allows you to configure the basics of this package.</p>\r\n\r\n\r\n\r\n<p>&nbsp;</p>\r\n\r\n\r\n\r\n<p><strong>Generate secret key</strong></p>\r\n\r\n\r\n\r\n<p>I have included a helper command to generate a key for you:</p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>php artisan jwt:secret\r\n</code></pre>\r\n\r\n\r\n\r\n<p><strong>Update your User model</strong></p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>&lt;?php\r\n\r\nnamespace App;\r\n\r\nuse Tymon\\JWTAuth\\Contracts\\JWTSubject;\r\nuse Illuminate\\Notifications\\Notifiable;\r\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\r\n\r\nclass User extends Authenticatable implements JWTSubject\r\n{\r\n    use Notifiable;\r\n\r\n    // Rest omitted for brevity\r\n\r\n    /**\r\n     * Get the identifier that will be stored in the subject claim of the JWT.\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function getJWTIdentifier()\r\n    {\r\n        return $this-&gt;getKey();\r\n    }\r\n\r\n    /**\r\n     * Return a key value array, containing any custom claims to be added to the JWT.\r\n     *\r\n     * @return array\r\n     */\r\n    public function getJWTCustomClaims()\r\n    {\r\n        return [];\r\n    }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p><strong>Configure Auth guard</strong><br />inside the config/auth.php file, update the following details</p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>'defaults' =&gt; [\r\n    'guard' =&gt; 'api',\r\n    'passwords' =&gt; 'users',\r\n],\r\n\r\n...\r\n\r\n'guards' =&gt; [\r\n    'api' =&gt; [\r\n        'driver' =&gt; 'jwt',\r\n        'provider' =&gt; 'users',\r\n    ],\r\n],\r\n</code></pre>\r\n\r\n\r\n\r\n<p><strong>Add authentication routes</strong></p>\r\n\r\n\r\n\r\n<p>First let&#8217;s add some routes in routes/api.php as follows:</p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>// Jwt Authentication\r\nRoute::post('register', [JwtAuthController::class, 'register'])-&gt;name('api.jwt.register');\r\nRoute::post('login', [JwtAuthController::class, 'login'])-&gt;name('api.jwt.login');\r\n\r\nRoute::group(['middleware' =&gt; 'auth:api'], function(){\r\n    Route::get('user', [JwtAuthController::class, 'me'])-&gt;name('api.jwt.user');\r\n    Route::get('refresh', [JwtAuthController::class, 'refresh'])-&gt;name('api.jwt.refresh');\r\n    Route::get('logout', [JwtAuthController::class, 'logout'])-&gt;name('api.jwt.logout');\r\n});\r\n</code></pre>\r\n\r\n\r\n\r\n<p>Create the JwtAuthController:</p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>php artisan make:controller JwtAuthController\r\n</code></pre>\r\n\r\n\r\n\r\n<p>Then add the following:</p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>\r\n\r\nnamespace App\\Http\\Controllers\\Auth;\r\n\r\nuse App\\Models\\User;\r\nuse Illuminate\\Http\\Request;\r\nuse App\\Http\\Controllers\\Controller;\r\nuse Illuminate\\Support\\Facades\\Auth;\r\n\r\nclass JwtAuthController extends Controller\r\n{\r\n    /**\r\n     * Create a new AuthController instance.\r\n     *\r\n     * @return void\r\n     */\r\n    public function __construct()\r\n    {\r\n        $this-&gt;middleware('auth:api', ['except' =&gt; ['login', 'register']]);\r\n    }\r\n\r\n    public function register(Request $request)\r\n    {\r\n        $validated = $request-&gt;validate([\r\n            'name' =&gt; 'required|string|max:100',\r\n            'email' =&gt; 'required|email|max:255|unique:users',\r\n            'password' =&gt; 'required|string|min:8|max:255|confirmed',\r\n            'password_confirmation' =&gt; 'required|string|min:8|max:255',\r\n        ]);\r\n\r\n        $user = new User;\r\n        $user-&gt;fill($request-&gt;all());\r\n        $user-&gt;password = bcrypt($request-&gt;password);\r\n        $user-&gt;save();\r\n\r\n        return response()-&gt;json([\r\n            'status' =&gt; 'success',\r\n            'data' =&gt; $user\r\n        ], 200);\r\n    }\r\n\r\n    /**\r\n     * Get a JWT via given credentials.\r\n     *\r\n     * @return \\Illuminate\\Http\\JsonResponse\r\n     */\r\n    public function login()\r\n    {\r\n        $credentials = request(['email', 'password']);\r\n\r\n        if (!$token = Auth::attempt($credentials)) {\r\n            return response()-&gt;json(['error' =&gt; 'Unauthorized'], 401);\r\n        }\r\n\r\n        return $this-&gt;respondWithToken($token);\r\n    }\r\n\r\n    /**\r\n     * Get the authenticated User.\r\n     *\r\n     * @return \\Illuminate\\Http\\JsonResponse\r\n     */\r\n    public function me()\r\n    {\r\n        return response()-&gt;json(Auth::user());\r\n    }\r\n\r\n    /**\r\n     * Log the user out (Invalidate the token).\r\n     *\r\n     * @return \\Illuminate\\Http\\JsonResponse\r\n     */\r\n    public function logout()\r\n    {\r\n        Auth::logout();\r\n\r\n        return response()-&gt;json(['message' =&gt; 'Successfully logged out']);\r\n    }\r\n\r\n    /**\r\n     * Refresh a token.\r\n     *\r\n     * @return \\Illuminate\\Http\\JsonResponse\r\n     */\r\n    public function refresh()\r\n    {\r\n        return $this-&gt;respondWithToken(Auth::refresh());\r\n    }\r\n\r\n    /**\r\n     * Get the token array structure.\r\n     *\r\n     * @param  string $token\r\n     *\r\n     * @return \\Illuminate\\Http\\JsonResponse\r\n     */\r\n    protected function respondWithToken($token)\r\n    {\r\n        return response()-&gt;json([\r\n            'access_token' =&gt; $token,\r\n            'token_type' =&gt; 'bearer',\r\n            'expires_in' =&gt; Auth::factory()-&gt;getTTL() * 60\r\n        ]);\r\n    }\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>You should now be able to POST to the login endpoint (e.g. <a href=\"http://example.dev/auth/login\" rel=\"nofollow\">http://example.dev/auth/login</a>) with some valid credentials and see a response like:</p>\r\n\r\n\r\n\r\n<p>&nbsp;</p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>{\r\n    \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\",\r\n    \"token_type\": \"bearer\",\r\n    \"expires_in\": 3600\r\n}</code></pre>\r\n\r\n\r\n\r\n<p>This token can then be used to make authenticated requests to your application.</p>\r\n","protected":false},"excerpt":{"rendered":"<p>JWT installation &amp; Settings Before we get into this JSON Web Token tutorial, what exactly is a JWT?In modern web trends, Popularity of single page applications, mobile applications, and RESTful API services, We are no longer spending much time building markup, instead we are building APIs that our front-end applications consume.Back-end is more about business &hellip; <a href=\"https://niyazjamal.wordpress.com/2021/06/12/how-to-install-and-configure-jwt-json-web-token-in-laravel-applications/\" class=\"more-link\">Continue reading <span class=\"screen-reader-text\">How to install and configure JWT (Json Web Token) in Laravel&nbsp;Applications</span></a></p>\n","protected":false},"author":8415137,"featured_media":1177,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"advanced_seo_description":"","_coblocks_attr":"","_coblocks_dimensions":"","_coblocks_responsive_height":"","_coblocks_accordion_ie_support":"","spay_email":"","jetpack_anchor_podcast":"","jetpack_anchor_episode":"","jetpack_anchor_spotify_show":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false,"jetpack_publicize_feature_enabled":true},"categories":[86504237],"tags":[719861641,96192961],"jetpack-related-posts":[{"id":724,"url":"https://niyazjamal.wordpress.com/2014/11/15/understanding-laravel-framework/","url_meta":{"origin":1175,"position":0},"title":"Understanding Laravel Framework","date":"15/11/2014","format":false,"excerpt":"Based on developers survey, Laravel is listed as the most popular PHP framework , designed for the development of model–view–controller (MVC) web applications. Best and fast growing PHP framework. Which has lot of functionalities, best framework for low and high end application development. The current version of laravel is 4.2.11…","rel":"","context":"In \"Laravel\"","img":{"alt_text":"","src":"https://niyazjamal.files.wordpress.com/2014/11/laravel.jpg?w=350&h=200&crop=1","width":350,"height":200},"classes":[]},{"id":914,"url":"https://niyazjamal.wordpress.com/2019/04/18/laravel-queues-1/","url_meta":{"origin":1175,"position":1},"title":"LARAVEL QUEUES &#8211;&nbsp;1","date":"18/04/2019","format":false,"excerpt":"we’ll create a simple app that demonstrates how to use Laravel Queues. We will cover database, redis queue drivers in this episode. Queues are useful for taking jobs, pieces of asynchronous work, and sending them to be performed by some other process. This is especially useful when making time-consuming API…","rel":"","context":"In \"Laravel\"","img":{"alt_text":"","src":"https://niyazjamal.files.wordpress.com/2019/04/laravel-queues.png?w=350&h=200&crop=1","width":350,"height":200},"classes":[]},{"id":838,"url":"https://niyazjamal.wordpress.com/2018/08/01/web-development-technologies-you-can-learn-in-2018/","url_meta":{"origin":1175,"position":2},"title":"Web development technologies you can learn in&nbsp;2018","date":"01/08/2018","format":false,"excerpt":"For many, the path goes through learning fundamentals like HTML, CSS and Javascript. After mastering the basics many aspiring engineers will dive deeper into object oriented Javascript, ES6, Angular, Node, React.js, Vue.js and more. We can build anything with javascript. But In this post I’d like to offer up some…","rel":"","context":"In \"JavaScript\"","img":{"alt_text":"","src":"https://niyazjamal.files.wordpress.com/2018/08/1_tfl-8wquenetyljx5mywua.png?w=350&h=200&crop=1","width":350,"height":200},"classes":[]},{"id":1098,"url":"https://niyazjamal.wordpress.com/2021/03/11/alpine-js-a-tiny-javascript-framework/","url_meta":{"origin":1175,"position":3},"title":"Alpine.js, a tiny JavaScript&nbsp;framework","date":"11/03/2021","format":false,"excerpt":"Today i'm writing about the new minimal js library Alpine.js, A rugged, minimal framework for composing JavaScript behaviours in the Html markup. Think of it like Tailwind for JavaScript. Alpine.js is a tiny JavaScript framework that makes declarative rendering super easy, without the weight of larger frameworks like Vue or…","rel":"","context":"In \"JavaScript\"","img":{"alt_text":"","src":"https://niyazjamal.files.wordpress.com/2021/03/alpinejs.jpg?w=350&h=200&crop=1","width":350,"height":200},"classes":[]},{"id":894,"url":"https://niyazjamal.wordpress.com/2019/03/12/laravel-eager-loading-load-vs-with/","url_meta":{"origin":1175,"position":4},"title":"Laravel Eager Loading &#8211; load() Vs.&nbsp;with()","date":"12/03/2019","format":false,"excerpt":"with() vs load() Both accomplish the same end results—eager loading a related model onto the first. In fact, they both run exactly the same two queries. The key difference is that with() eager loads the related model up front, immediately after the initial query (all(), first(), or find(x), for example);…","rel":"","context":"In \"Laravel\"","img":{"alt_text":"","src":"","width":0,"height":0},"classes":[]},{"id":1225,"url":"https://niyazjamal.wordpress.com/2022/01/28/how-to-fix-docker-error-loading-config-file/","url_meta":{"origin":1175,"position":5},"title":"How to fix docker error loading config&nbsp;file","date":"28/01/2022","format":false,"excerpt":"What are the causes for docker error loading config file? As we discussed earlier, the config.json file in docker stores the unencrypted credentials. Thus during docker installation, while we use docker CLI using sudo before adding the user to the docker group, we might encounter an error message, telling that…","rel":"","context":"In \"Servers\"","img":{"alt_text":"","src":"https://niyazjamal.files.wordpress.com/2022/01/docker-cloud-twitter-card.png?w=350&h=200&crop=1","width":350,"height":200},"classes":[]}],"jetpack_featured_media_url":"https://niyazjamal.files.wordpress.com/2021/06/laravel-and-jwt.jpeg","jetpack_publicize_connections":[],"jetpack_shortlink":"https://wp.me/pz0ND-iX","jetpack_sharing_enabled":true,"jetpack_likes_enabled":true,"amp_validity":null,"amp_enabled":true,"_links":{"self":[{"href":"https://public-api.wordpress.com/wp/v2/sites/niyazjamal.wordpress.com/posts/1175"}],"collection":[{"href":"https://public-api.wordpress.com/wp/v2/sites/niyazjamal.wordpress.com/posts"}],"about":[{"href":"https://public-api.wordpress.com/wp/v2/sites/niyazjamal.wordpress.com/types/post"}],"author":[{"embeddable":true,"href":"https://public-api.wordpress.com/wp/v2/sites/niyazjamal.wordpress.com/users/8415137"}],"replies":[{"embeddable":true,"href":"https://public-api.wordpress.com/wp/v2/sites/niyazjamal.wordpress.com/comments?post=1175"}],"version-history":[{"count":14,"href":"https://public-api.wordpress.com/wp/v2/sites/niyazjamal.wordpress.com/posts/1175/revisions"}],"predecessor-version":[{"id":1224,"href":"https://public-api.wordpress.com/wp/v2/sites/niyazjamal.wordpress.com/posts/1175/revisions/1224"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://public-api.wordpress.com/wp/v2/sites/niyazjamal.wordpress.com/media/1177"}],"wp:attachment":[{"href":"https://public-api.wordpress.com/wp/v2/sites/niyazjamal.wordpress.com/media?parent=1175"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://public-api.wordpress.com/wp/v2/sites/niyazjamal.wordpress.com/categories?post=1175"},{"taxonomy":"post_tag","embeddable":true,"href":"https://public-api.wordpress.com/wp/v2/sites/niyazjamal.wordpress.com/tags?post=1175"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}},"__N_SSG":true}